// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package Di

import (
	"2024_akutansi_project/Controllers"
	"2024_akutansi_project/Middleware"
	"2024_akutansi_project/Repositories"
	"2024_akutansi_project/Services"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func DIAuth(db *gorm.DB) *Controllers.AuthController {
	authRepository := Repositories.AuthRepositoryProvider(db)
	jwtService := Services.JwtServiceProvider()
	companyRepository := Repositories.CompanyRepositoryProvider(db)
	authService := Services.AuthServiceProvider(authRepository, jwtService, companyRepository)
	authController := Controllers.AuthControllerProvider(authService)
	return authController
}

func DICommonMiddleware(db *gorm.DB) *Middleware.CommondMiddleware {
	jwtService := Services.JwtServiceProvider()
	authRepository := Repositories.AuthRepositoryProvider(db)
	commondMiddleware := Middleware.CommonMiddlewareProvider(jwtService, authRepository)
	return commondMiddleware
}

func DICompany(db *gorm.DB) *Controllers.CompanyController {
	companyRepository := Repositories.CompanyRepositoryProvider(db)
	userCompanyRepository := Repositories.UserCompanyRepositoryProvider(db)
	paymentMethodRepository := Repositories.PaymentMethodRepositoryProvider(db)
	companyService := Services.CompanyServiceProvider(companyRepository, userCompanyRepository, paymentMethodRepository)
	companyController := Controllers.CompanyControllerProvider(companyService)
	return companyController
}

func DISaleableProduct(db *gorm.DB) *Controllers.SaleableProductController {
	saleableProductRepository := Repositories.SaleableProductRepositoryProvider(db)
	materialProductRepository := Repositories.MaterialProductRepositoryProvider(db)
	categoryRepository := Repositories.CategoryRepositoryProvider(db)
	saleableProductService := Services.SaleableProductServiceProvider(saleableProductRepository, materialProductRepository, categoryRepository)
	saleableProductController := Controllers.SaleableProductControllerProvider(saleableProductService)
	return saleableProductController
}

func DIInvoice(db *gorm.DB) *Controllers.InvoiceController {
	invoiceRepository := Repositories.InvoiceRepositoryProvider(db)
	invoiceMaterialRepository := Repositories.InvoiceMaterialRepositoryProvider(db)
	invoiceSaleableRepository := Repositories.InvoiceSaleableRepositoryProvider(db)
	saleableProductRepository := Repositories.SaleableProductRepositoryProvider(db)
	paymentMethodRepository := Repositories.PaymentMethodRepositoryProvider(db)
	companyRepository := Repositories.CompanyRepositoryProvider(db)
	invoiceService := Services.InvoiceServiceProvider(invoiceRepository, invoiceMaterialRepository, invoiceSaleableRepository, saleableProductRepository, paymentMethodRepository, companyRepository)
	invoiceController := Controllers.InvoiceControllerProvider(invoiceService)
	return invoiceController
}

func DICategory(db *gorm.DB) *Controllers.CategoryController {
	categoryRepository := Repositories.CategoryRepositoryProvider(db)
	categoryService := Services.CategoryServiceProvider(categoryRepository)
	categoryController := Controllers.CategoryControllerProvider(categoryService)
	return categoryController
}

func DIPaymentMethod(db *gorm.DB) *Controllers.PaymentMethodController {
	paymentMethodRepository := Repositories.PaymentMethodRepositoryProvider(db)
	paymentMethodService := Services.PaymentMethodServiceProvider(paymentMethodRepository)
	paymentMethodController := Controllers.PaymentMethodControllerProvider(paymentMethodService)
	return paymentMethodController
}
